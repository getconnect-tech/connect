generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  display_name  String?
  profile_url   String?
  created_at    DateTime         @default(now())
  is_verified   Boolean          @default(false)
  updated_at    DateTime         @default(now()) @updatedAt
  invited_users InvitedUser[]
  messages      Message[]
  tickets       Ticket[]
  workspaces    UserWorkspaces[]
  api_keys      ApiKeys[]
  macros        Macro[]
  tickets_rel   TicketUser[]
  messages_rel  UserMessage[]
}

model Workspace {
  id             String           @id @default(uuid())
  name           String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  industry       String
  image_url      String?
  team_size      TeamSize
  invited_users  InvitedUser[]
  tickets        Ticket[]
  users          UserWorkspaces[]
  ticketLabels   Label[]
  api_keys       ApiKeys[]
  configurations Configuration[]
  macros         Macro[]
  contacts       Contact[]
}

model Label {
  id         String   @id @default(uuid())
  name       String
  icon       String
  color      String   @default("#7B7A79")
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  worksapce    Workspace     @relation(fields: [workspace_id], references: [id])
  workspace_id String
  tickets      TicketLabel[]
}

model Ticket {
  id            String         @id @default(uuid())
  workspace_id  String
  title         String
  subject       String
  contact_id    String
  assigned_to   String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  priority      PriorityLevels @default(NONE)
  messages      Message[]
  assigned_user User?          @relation(fields: [assigned_to], references: [id])
  contact       Contact        @relation(fields: [contact_id], references: [id])
  workspace     Workspace      @relation(fields: [workspace_id], references: [id])
  source        ChannelType
  mail_id       String?        @unique
  labels        TicketLabel[]
  status        TicketStatus   @default(OPEN)
  snooze_until  DateTime?
  users         TicketUser[]
}

model Message {
  id           String        @id @default(uuid())
  reference_id String
  content      String
  created_at   DateTime      @default(now())
  ticket_id    String
  author_id    String?
  type         MessageType
  channel      ChannelType
  author       User?         @relation(fields: [author_id], references: [id])
  ticket       Ticket        @relation(fields: [ticket_id], references: [id])
  email_events EmailEvent[]
  users_rel    UserMessage[]
}

model Contact {
  id           String @id @default(uuid())
  workspace_id String
  email        String

  address     Json?
  age         Int?
  avatar      String?
  birthday    DateTime?
  description String?
  first_name  String?
  last_name   String?
  name        String
  gender      GENDER?
  phone       String?
  title       String?
  username    String?
  website     String?
  group_id    String?

  custom_traits Json?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  group     Group?    @relation(fields: [group_id], references: [id])
  tickets   Ticket[]
  workspace Workspace @relation(fields: [workspace_id], references: [id])

  @@unique(name: "workspace_email_id", [workspace_id, email])
}

model Group {
  id       String    @id @default(uuid())
  name     String
  email    String
  contacts Contact[]
}

model VerificationToken {
  email   String   @id
  token   String
  expires DateTime
}

model InvitedUser {
  id              String    @id @default(uuid())
  name            String
  email           String
  invited_by      String
  workspace_id    String
  created_at      DateTime  @default(now())
  invited_by_user User      @relation(fields: [invited_by], references: [id])
  workspace       Workspace @relation(fields: [workspace_id], references: [id])
}

model ApiKeys {
  api_key      String    @id
  name         String
  workspace_id String
  created_by   String
  created_at   DateTime  @default(now())
  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  user         User      @relation(fields: [created_by], references: [id])
}

model Configuration {
  id           String     @id @default(uuid())
  workspace_id String
  workspace    Workspace  @relation(fields: [workspace_id], references: [id])
  type         ConfigType
  extra        String?
  value        Json
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now()) @updatedAt

  @@unique(name: "workspace_config_id", [workspace_id, type, extra])
}

model Macro {
  id           String    @id @default(uuid())
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  title        String
  content      String
  created_by   String
  user         User      @relation(fields: [created_by], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt
}

model EmailEvent {
  id         String         @id @default(uuid())
  message_id String
  message    Message        @relation(fields: [message_id], references: [id])
  event      EmailEventType
  extra      String
  created_at DateTime       @default(now())
}
